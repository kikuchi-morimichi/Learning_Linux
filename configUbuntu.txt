# アップデートの確認

# アップデートの実行
sudo apt -y update

# アップグレードの実行
sudo apt -y upgrade

# opensshのインストール
sudo apt -y install openssh-client
sudo apt -y install openssh-server

# フォルダ名を英語表記に変更する
LANG=C xdg-user-dirs-update --force
cat .config/user-dirs.dirs
あとは日本語のフォルダを削除して、再起動

### pythonの仮想環境作成 ###
# pipの確認
which pip
which pip3

# pipのインストール
sudo apt install python3-pip

# pythonコマンドが実行できないので以下をインストールする
sudo apt install python-is-python3

# python仮想環境を作るために以下をインストールする
sudo apt install python3.12-venv

# python仮想環境用のフォルダを作成して移動
mkdir /home/morimichi/pythonVirtualEnv
cd /home/morimichi/pythonVirtualEnv
# venvという名前のpython仮想環境を作成
python -m venv venv 

#./venv/bin/activateに実行権限を追加
chmod u+x ./venv/bin/activate

# 仮想環境をアクティベート
source ./venv/bin/activate

# 以下のコマンドでVScodeを開く
code .

# 仮想環境のディアクティベート
deactivate

# インストールされているか確認
pip --version

# 仮想環境にJupyter Notebookのインストール
pip install notebook

# 仮想環境にデータ分析用ライブラリをインストール(numpyはすでに入っていた)
pip install pandas
pip install Matplotlib
pip install Scikit-learn
pip install TensorFlow
pip install Keras

# インストール済みライブラリの確認
pip list

# Jupyter Notebookの起動
jupyter notebook


# RDP接続　https://linux-jp.org/?p=1056
sudo apt install xrdp

sudo adduser xrdp ssl-cert

sudo ufw allow from 192.168.3.0/24 to any port 3389
sudo ufw reload
sudo ufw status
#　ファイアウォールを有効にする
sudo ufw enable

sudo ufw allow from 192.168.3.0/24 to any port 22

# windowsからRDP接続する　pro以上が必要

# locateコマンドを使えるようにする
sudo apt install plocate


# node.jsのインストール

sudo apt -y update
sudo apt -yV upgrade
sudo /sbin/shutdown -r now
# curlのインストール
sudo apt -y install curl

# nvmのインストール
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
source ~/.profile

# node.jsのインストール
nvm ls-remote
nvm install 23.6.0
nvm install 22.13.1  
nvm install 20.11.1　# これを採用
nvm install 18.17.0
nvm list
nvm use 23.6.0
nvm use 22.13.1 
nvm use 12.22.12　# これを採用
nvm use 18.17.0
nvm uninstall 12.22.12
nvm uninstall 22.13.1
nvm alias default v22.13.1
nvm alias default v20.11.1

# AngularCliのインストール
npm install -g @angular/cli
npm install -g @angular/cli@10.0.4

# firebase cliのインストール
npm install -g firebase-tools

# firebaseへのログイン
firebase login

# プロジェクトの表示
firebase projects:list


# gitの設定
sudo apt update
sudo apt install git

git --version
git config --global user.name "kikuchi"
git config --global user.email kikkun419themoss@gmail.com

git config  --global core.autocrlf false
git config  --global core.quotepath false

## ssh接続の準備 ##
# opensshクライアントのインストール
sudo apt install openssh-client

# ssh用の鍵を作成　全部エンター押下で良い
ssh-keygen -t ed25519 -C "kikkun419themoss@gmail.com"

# 鍵ができていることを確認
morimichi@morimichi-MS-7C95:~/.ssh$ ls /home/morimichi/.ssh/
authorized_keys  id_ed25519  id_ed25519.pub

# 公開鍵を表示してコピー　→　githubのssh鍵に登録
cat /home/morimichi/.ssh/id_ed25519.pub

# SSHエージェントを起動　いらないかも
eval "$(ssh-agent -s)"
# 秘密鍵をSSHエージェントに追加　いらないかも
ssh-add ~/.ssh/id_ed25519
Identity added: /home/morimichi/.ssh/id_ed25519 (kikkun419themoss@gmail.com)

# sshでクローン
git clone -b kikuchi_branch git@github.com:kikuchi-morimichi/bio_PJ.git
git clone git@github.com:kikuchi-morimichi/Bio-IT-Project.git

# クローンしたディレクトリに移動
cd <プロジェクト名>

# リモートレポジトリを表示
git remote -v

# ブランチ名や、ステータスを表示
git status

# ステージング
git add .
git status

# コミット
git commit -m "add: kikuchi.html, sato.html, bootstrapによるナビゲーションバーを追加、ナビゲーションバーからそれぞれのページに遷移できるようにしました。"
git status

# プッシュ
git push origin main
git push origin kikuchi_branch

# javaのインストール

apt-cache search openjdk

sudo apt update
# インストール
sudo apt install openjdk-17-jdk
java -version

# インストール済みのjavaを確認
update-alternatives --list java
update-alternatives --list javac

# デフォルトで使用するjavaを選択
sudo update-alternatives --config java


# mySQLのインストール
mysql --version
sudo apt update
sudo apt install mysql-server-8.0
mysql --version
# 起動
sudo service mysql start
# ログイン
sudo mysql -u root

CREATE DATABASE person;
USE person;

SHOW DATABASES;
SHOW TABLES;

# テーブル作成
CREATE TABLE persons (
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    birthdate DATE NOT NULL,
    height INT NOT NULL,
    weight INT NOT NULL,
    PRIMARY KEY (id)
);
# データ挿入
INSERT INTO persons (id, name, birthdate, height, weight) VALUES
  (1, 'John Lennon', '1940-10-09', 180, 77),
  (2, 'Paul McCartney', '1942-06-18', 175, 65),
  (3, 'George Harrison', '1943-02-25', 190, 80),
  (4, 'Ringo Starr', '1940-07-07', 188, 78);
  
  
  exit;
  
# virtual Boxのインストール
sudo apt install virtualbox


## dockerのインストール
https://docs.docker.com/engine/install/ubuntu/#uninstall-docker-engine

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker run hello-world

## tomcat環境の構築
sudo docker pull tomcat
# 実行が終わると自動でコンテナが削除される
sudo docker run -it --rm -p 8080:8080 tomcat:9.0
sudo docker run -it -p 8080:8080 tomcat:9.0
sudo docker run -p 8080:8080 tomcat:9.0

# コンテナを実行してバッシュに接続する方法
docker start <コンテナ名orコンテナID>
sudo docker container exec -it c46ea70e71eb bash

# コンテナにファイル転送
sudo docker cp /home/morimichi/first.html c46ea70e71eb:/usr/local/tomcat/webapps/test/first.html

# コンテナの停止
sudo docker stop c46ea70e71eb

## mysqlコンテナの作成
# 最新のイメージを取得
sudo docker image pull mysql:latest

# インストールしたイメージから、コンテナを起動･作成する
# MYSQL_ROOT_PASSWORDにログインする際のパスワードを設定する
sudo docker run -it --name test-wolrd-mysql -e MYSQL_ROOT_PASSWORD=P@ssw0rd -d mysql:latest
# コンテナでbashを開く
sudo docker exec -it test-wolrd-mysql bash -p
# MySQLのコンテナにログインする
$ mysql -u root -p -h 127.0.0.1


## curlコマンドでpostデータ送信
curl -X POST --data-urlencode 'name=太郎' -d 'age=30' https://xxxxx.net/xxxxxx



# dockerコマンドでsudoを使わないようにする方法
sudo groupadd docker
sudo usermod -aG docker morimichi
newgrp docker

# コンテナにファイルをコピー
docker cp  c46ea70e71eb:/usr/local/tomcat/webapps/HelloJava/WEB-INF/lib/jackson-databind-2.18.2.jar

javac -cp "/usr/local/tomcat/lib/servlet-api.jar:/usr/local/tomcat/webapps/HelloJava/WEB-INF/lib/jackson-databind-2.18.2.jar:/usr/local/tomcat/webapps/HelloJava/WEB-INF/lib/jackson-core-2.18.2.jar" HelloServlet.java

docker cp C:\Users\kikku\OneDrive\デスクトップ\java\HelloJava\WEB-INF\src\HelloServlet.java 43a5e9e27e30:/usr/local/tomcat/webapps/WEB-INF/src/HelloServlet.java


## 1TB SSDのマウント
# パーティションの作成
sudo fdisk /dev/sda
ｎ
p
+900G

結果(sudo fdisk -l)
ディスク /dev/sda: 931.51 GiB, 1000204886016 バイト, 1953525168 セクタ
Disk model: CT1000BX500SSD1 
単位: セクタ (1 * 512 = 512 バイト)
セクタサイズ (論理 / 物理): 512 バイト / 512 バイト
I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト
ディスクラベルのタイプ: dos
ディスク識別子: 0x93ab5d4b

デバイス   起動 開始位置   最後から     セクタ サイズ Id タイプ
/dev/sda1           2048 1887438847 1887436800   900G 83 Linux

# ファイルシステムの作成
sudo mkfs -t ext4 /dev/sda1

結果
morimichi@morimichi-MS-7C95:/$ sudo mkfs -t ext4 /dev/sda1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done                            
Creating filesystem with 235929600 4k blocks and 58982400 inodes
Filesystem UUID: 94a5145c-0b11-4b54-bf10-606b6791f796
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
	102400000, 214990848

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information: done

# ファイルシステムのマウント
sudo mkdir /mntdisk
sudo chmod 777 /mntdisk/
sudo mount -t ext4 /dev/sda1 /mntdisk

# 自動マウントの設定
# 以下の文を/etc/fstabに追加する
/dev/sda1 /mntdisk ext4 defaults 0 0


## tailscaleによるVPN通信設定
# tailscaleのインストール
curl -fsSL https://tailscale.com/install.sh | sh
# 有効化
sudo tailscale up
